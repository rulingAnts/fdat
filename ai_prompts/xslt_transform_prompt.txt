Detailed instructions for the Discourse Chart import in plain English (for JavaScript, outputting in HTML that allows the users to adjust the columns and then export to LaTeX)

I'm trying to import an XML file that represents a chart (a table really). I'd like to develop JavaScript friendly XSLT to transform it to an HTML table. It would be helpful if the variables for the various styles are at the top of the XSLT template so that they're easy to edit (CSS styles maybe?). Make sure my XSLT is JavaScript and browser friendly.

The source XML is an interlinear text TextChart XML file exported from Fieldworks Language Explorer. You can find technical documentation for that on the SIL website (https://software.sil.org/fieldworks/help/technical-documents/). I'm also attaching a sample file (DiscourseChartSet1a.xml).

The basic logic of the file is like this:
<document> is the root element
<chart> contains the data rows (this should probably be table and/or tbody). Everywhere more specific borders aren't specified, there should be thin, gray borders between all cells in the table.
<langauges> contains metadata about languages and writing systems used. You don't really need to worry much about this. It's meta-data that you should include in comment tags at the start of the resulting HTML document before the table.

Within the <chart> element are rows (<row>). These should be <tr> elements in HTML. These come in several types (type attribute, which you should translate to CSS classes and have class selectors for in the CSS code):
<row type="title1"> is the first header row (its cells should be <th>)
There should be thick box borders around the group of columns spanned by each header in this row (they'll usually span 2 or 3 columns, but might also only be one).
<row type="title2"> is the second header row (its cells should be <th>)
There should be thick box borders between each cell in the title2 header row, but not between columns beneath.

<row type="normal"> is a normal data row (representing a single clause)
<row type="dependent"> is a dependent clause row. The only formatting/rendering difference is blue text.
<row type="speech"> represents a speech/quotation clause. This should have a green text color. Otherwise exactly the same as a normal row.
<row type="song"> represents a song clause. The only difference from a normal row is that it would have purple text color.

<row> elements also can have an optional endSent="true" or endPara="true". <row endSent="true"> should get a thicker and darker border at the bottom. <row endPara="true"> should get an extra thick border at the bottom of the row. Please also make and assign corresponding CSS classes for rows with these so that it's easy to restyle.

Within each <row> element, there are <cell> elements, which might have an optional cols attribute (which works the same as colspan in HTML). (so like <cell cols="3"> would be cell that spans 3 columns). They also may contain a reversed="true" attribute, which means that the contents are right aligned instead of left aligned.

<cell> elements should be <td> and <th> (depending on whether they're header rows or not).

The <cell> elements contain <main> and <gloss> elements. This represents interlinear word and gloss lines. A given cell may only contain a <main> element with no <glosses> element. But if it contains a <glosses> element, that <glosses> element should have the same number of <gloss> daughter elements as there are <word> elements in the sister <main> element. It should be possible to display each word and its corresponding gloss interlinearized, aligned (and with spacing between them so that words and glosses do not touch or overlap and word breaks are clear), and able to wrap within a cell together, still aligned and interlinearized. I think there are ways to do this with <div> and css (which works REALLY well if you can remember how) or with ruby elements if that doesn't work (but ruby elements are kind of a pain to style, so that's a plan B solution). There should be spaces between words as well. <word> elements shouldn't have any particular style of their own, they just inherit (like from row and column styles).

Heads up, <main> elements can also be empty (<main />) and that's how empty cells will be represented. <lit> elements represent punctuation or labels. If a lit element contains an opening parenthesis or a square bracket, you should group it with whatever element follows (so like <lit>[</lit><word>...</word>, in the resulting html, the opening square bracket should be attached to the word that follows with no space between the opening bracket and the word). A closing parenthesis or square bracket should be grouped with whatever comes before it.

<main> elements might also contain one or more <listRef>, <clauseMkr>, and <rowNum> element.

<listRef> elements come last in the main element. They are usually wrapped in opening and closing parentheses in <lit> elements (example: <lit>(</lit><listRef>A</listRef><lit>)</lit>. That whole cluster of code for each listRef element should group together in the resulting HTML code and be separated from other word, rowNum, listRef, and clauseMkr elements with spaces) <listRef> elements should be rendered with a "listRef" class (and corresponding .listRef selector in the CSS stylesheet that specifies orange text color). <listRef> elements should come last in a cell (or following the last word in the main line in the interlinear lines).

<clauseMkr> elements are usually wrapped with <lit> elements containing square brackets (like <lit>[</lit><clauseMkr>10a<lit>]</lit>). Those should stay together as a unit and be separated from words or <listRef> elements preceding or following with spaces. They should be ordered after words, but before listRef elements. <clauseMkr> elements can also come in pairs denoting a range, for example (<lit>[</lit><clauseMkr>16a</clauseMkr><lit>-</lit><clauseMkr>16b</clauseMkr]). That should also be grouped as a single unit as it's ordered and transformed. And that group should get a css class and corresponding selector and be styled with green text color by default.


<rowNum> elements should just be plain default, black text, but give them a css class so that I can fiddle with that if I want to.

<main> elements could also contain a <note> element, which might be empty or might not be. The note element contains notes and I think usually you'll only find that in the final column and probably won't find other elements in the same cell. The note element contains optional notes. I suggest giving these also a css class selector so that I can experiment with styling them however I want.

Each main element might have a <glosses> sister element. Within each <glosses> element, as far as I know, you'll only find <gloss> daughters. As I said above, please interlinearize and align these one-to-one with corresponding <word> elements from the <main> element in the same cell. Make sure there are spaces separating interlinear word/gloss pairs so that they don't touch or overlap. Not every cell has a <glosses> element. If it doesn't, then that cell doesn't need interlinearizing. Glosses should be gray and slightly smaller font size than the word elements.

I think that should cover everything. Got any questions?